using Tutorial3.Exceptions;
using Tutorial3.Interfaces;

namespace Tutorial3.Containers;

public enum ContainerType
{
    Refrigerated,
    Liquid,
    Gas,
    Cargo
}

public abstract class Container : IContainer
{
    public double CargoMass { get; set; }
    public double Height { get; set; }
    public double TareWeight { get; set; }
    public double Depth { get; set; }
    public string SerialNumber { get; private set; }
    public double MaxPayload { get; set; }
    public ContainerType Type { get; protected set; }

    private static int serialNumberCounter = 0;

    protected Container(double cargoMass, double height, double tareWeight, double depth, string serialNumber,
        double maxPayload)
    {
        CargoMass = cargoMass;
        Height = height;
        TareWeight = tareWeight;
        Depth = depth;
        MaxPayload = maxPayload;
        SerialNumber = GenerateSerialNumber();
    }
    

    private string GenerateSerialNumber()
    {
        serialNumberCounter++;
        return $"KON-{Type.ToString().Substring(0, 1).ToUpper()}-{serialNumberCounter}";
    }

    public virtual void Unload()
    {
        throw new NotImplementedException();
    }

    public virtual void Load(double cargoWeight)
    {
        throw new OverfillException();
    }
    public virtual string ToString()
    {
        return $"Type: {Type}, Cargo Mass: {CargoMass}, Height: {Height}, Tare Weight: {TareWeight}, Depth: {Depth}, Max Payload: {MaxPayload}, Serial Number: {SerialNumber}";
    }
}


// We are preparing an application for managing container loading. Containers can later be transported by various types of vehicles - ships, trains, trucks, etc.
// The system we are designing will handle the loading of containers onto a container ship - a vessel equipped with special guides allowing for the transport of containers. Containers can be of different types depending on the cargo. Bananas should be transported in refrigerated containers; milk should be transported in liquid containers; helium should be transported in gas containers. All these containers have some common features:
// All containers have:
// The mass of the cargo (in kilograms)
// Height (in centimeters)
// Tare weight (the weight of the container itself, in kilograms) Depth (in centimeters)
// Serial number
// The format of the number is KON-C-1
// The first part of the number is always "KON"
// The second part represents the type of container
// The third part is a number. Numbers should be unique. There should be no possibility of two containers having the same number. Numbers should be generated by the system.
// The maximum payload of a given container in kilograms
// All containers should allow for:
// Emptying the cargo
// Loading the container with a given mass of cargo
// If the mass of the cargo is greater than the capacity of a given container, we should throw an OverfillException error
// Liquid containers (L)
// Liquid containers allow for the transportation of hazardous cargo (e.g., fuel) and ordinary cargo (e.g., milk).
// These types of containers should implement the IHazardNotifier interface
// This interface allows for sending a text notification during the occurrence of a hazardous situation along with information about the container number.
// At the moment of initiating the loading method for goods into the container, we should:
// If the container stores hazardous cargo - it can only be filled to 50% of its capacity
// Otherwise, it can be filled up to 90% of its capacity
// If we violate any of the described rules - we should report the attempt to perform a dangerous operation.
// Gas containers (G)
// Containers storing gas carry additional information about the pressure (in atmospheres).
// When emptying a gas container - we leave 5% of its cargo inside the container.
// It should implement the IHazardNotifier interface. The method should allow for informing about the occurrence of a hazardous event along with the serial number of the container.
// If the mass of the cargo exceeds the allowable payload - we want to return an error.
//
// Refrigerated container (C)
// A refrigerated container contains information about:
// The type of product that can be stored in the container.
// The temperature maintained in the container.
// The container can only store products of the same type.
// The temperature of the container cannot be lower than the temperature required by a given type of product.
// Example of possible products and temperatures.
// Our application should allow for the preparation of a given container ship for a voyage. About the container ship itself, we would like to remember:
// All the containers that the ship transports
// The maximum speed the container ship can develop (in knots)
// The maximum number of containers that can be transported
// The maximum weight of all containers that can be transported by the ship (in tons)
// We want the application to support the following operations:
// Create a container of a given type Load cargo into a given container Load a container onto a ship
//  
// Load a list of containers onto a ship
// Remove a container from the ship
// Unload a container
// Replace a container on the ship with a given number with another container
// The possibility of transferring a container between two ships Print information about a given container
// Print information about a given ship and its cargo
// Then, in the Main method, try to use the classes and methods you have prepared. Check if you are able to perform all the actions described in the text.
